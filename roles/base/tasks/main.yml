---

- name: update the package cache
  community.general.pacman:
    update_cache: true

- name: upgrade the packages
  community.general.pacman:
    upgrade: true

- name: install basic tools
  community.general.pacman:
    name:
      - fish
      - neovim
      - tree
    state: present

# Groups and users.

- name: create groups
  ansible.builtin.group:
    name: "{{ item }}"
  loop:
    - wheel
    - ssh

- name: create user elwinar
  ansible.builtin.user:
    name: elwinar
    shell: /usr/bin/fish
    groups: wheel,ssh
    append: true
    create_home: true
    state: present

# SSH configuration. Obviously already installed for remote machines. Fairly
# reasonable configuration without pushing too hard on the secure side to keep
# things simple.

- name: install sshd
  community.general.pacman:
    name: openssh
    state: present

- name: configure sshd
  ansible.builtin.template:
    src: etc/ssh/sshd_config
    dest: /etc/ssh/sshd_config
    owner: root
    group: root
    mode: 0644
    validate: /usr/bin/sshd -f %s -t
  register: sshd_config

- name: restart sshd
  ansible.builtin.service:
    name: sshd
    state: restarted
  when: sshd_config.changed

- name: remove sshd short moduli keys
  ansible.builtin.shell: |
    awk '$5 >= 3071' /etc/ssh/moduli | tee /etc/ssh/moduli.tmp
    mv /etc/ssh/moduli.tmp /etc/ssh/moduli

- name: ensure ssh is started on boot
  ansible.builtin.service:
    name: sshd
    enabled: true
    state: started

# Sudo configuration. Only the wheel group is allowed to use sudo or su.

- name: install sshd
  community.general.pacman:
    name: sudo
    state: present

- name: configure sudoers
  ansible.builtin.template:
    src: etc/sudoers
    dest: /etc/sudoers
    owner: root
    group: root
    mode: 0440
    validate: /usr/sbin/visudo -cf %s

- name: restrict su access
  ansible.builtin.template:
    src: etc/pam.d/su
    dest: /etc/pam.d/su
    owner: root
    group: root
    mode: 0644

# NTP configuration.

- name: install ntp
  community.general.pacman:
    name: ntp
    state: present

- name: configure ntp
  ansible.builtin.template:
    src: etc/ntp.conf
    dest: /etc/ntp.conf
    owner: root
    group: root
    mode: 0644
  register: ntp_config

- name: restart ntp
  ansible.builtin.service:
    name: ntpd
    state: restarted
  when: ntp_config.changed

- name: ensure ntp is started on boot
  ansible.builtin.service:
    name: ntpd
    enabled: true
    state: started

# RNG Tools configuration. As a headless server doesn't have a keyboard or
# pointer device, there is next to no fast source of randomness available.
# rng-tools is a solution for that.

- name: install rng-tools
  community.general.pacman:
    name: rng-tools
    state: present

- name: configure rng-tools
  ansible.builtin.template:
    src: etc/default/rng-tools
    dest: /etc/default/rng-tools
    owner: root
    group: root
    mode: 0640
  register: rng_tools_config

- name: restart rng-tools
  ansible.builtin.service:
    name: rngd
    state: restarted
  when: rng_tools_config.changed

- name: ensure rng-tools is started on boot
  ansible.builtin.service:
    name: rngd
    enabled: true
    state: started

# UFW configuration. Deny all incoming or outgoing traffic except for SSH,
# DNS, and NTP. Other roles are expected to add their own rules on top of this
# to allow their traffic.

- name: install ufw
  community.general.pacman:
    name: ufw
    state: present

- name: ensure ufw is started on boot
  ansible.builtin.service:
    name: ufw
    enabled: true
    state: started

- name: reset ufw configuration
  community.general.ufw:
    state: reset

- name: deny all traffic by default
  community.general.ufw:
    default: deny

- name: allow SSH in
  community.general.ufw:
    rule: limit
    port: 22
    direction: in

- name: allow NTP out
  community.general.ufw:
    rule: allow
    port: 123
    direction: out

- name: allow DNS out
  community.general.ufw:
    rule: allow
    port: 53
    direction: out

- name: enable ufw
  community.general.ufw:
    state: enabled

# fail2ban bans IP exhibiting suspicous behaviors, like password failures,
# exploit scanning, etc.

- name: install fail2ban
  community.general.pacman:
    name: fail2ban
    state: present

- name: ensure fail2ban is started on boot
  ansible.builtin.service:
    name: fail2ban
    enabled: true
    state: started

- name: configure fail2ban
  ansible.builtin.template:
    src: etc/fail2ban/jail.local
    dest: /etc/fail2ban/jail.local
    owner: root
    group: root
    mode: 0640
  register: fail2ban_config

- name: restart fail2ban
  ansible.builtin.service:
    name: fail2ban
    state: restarted
  when: fail2ban_config.changed
